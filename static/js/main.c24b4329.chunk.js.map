{"version":3,"sources":["components/custom-search-box/CustomSearchBox.js","components/custom-hits/CustomHits.js","App.js","serviceWorker.js","index.js"],"names":["CustomSearchBox","connectSearchBox","currentRefinement","refine","isSearchStalled","Form","noValidate","action","role","FormGroup","id","FormControl","type","value","onChange","event","currentTarget","Button","variant","onClick","CustomHits","connectHits","hits","map","hit","Card","key","objectID","Body","Title","title","year","Text","cast","searchClient","algoliasearch","App","Container","className","Row","Col","InstantSearch","indexName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAcaA,G,MAAkBC,aATb,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAoCC,GAAvC,EAAsBC,gBAAtB,EAAuCD,QAAvC,OACd,kBAACE,EAAA,EAAD,CAAMC,YAAU,EAACC,OAAO,GAAGC,KAAK,UAC5B,kBAACC,EAAA,EAAD,CAAWC,GAAG,cACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,SAASC,MAAOX,EAAmBY,SAAU,SAAAC,GAAK,OAAIZ,EAAOY,EAAMC,cAAcH,UACnG,kBAACI,EAAA,EAAD,CAAQP,GAAG,eAAeQ,QAAQ,gBAAgBC,QAAS,kBAAMhB,EAAO,MAAxE,sB,gBCQCiB,EAAaC,aAbb,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACT,4BACKA,EAAKC,KAAI,SAAAC,GAAG,OACT,kBAACC,EAAA,EAAD,CAAMC,IAAKF,EAAIG,UACX,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,eAAgBL,EAAIM,MAApB,eAAgCN,EAAIO,OACpC,kBAACN,EAAA,EAAKO,KAAN,eAAeR,EAAIS,KAAK,GAAxB,YAA8BT,EAAIS,KAAK,GAAT,cAAqBT,EAAIS,KAAK,IAAO,c,gCCFjFC,EAAeC,IAAc,aAAa,oCAkBjCC,MAhBf,WACI,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,QACjB,oDACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAeP,aAAcA,EAAcQ,UAAU,cACjD,kBAAC1C,EAAD,MACA,kBAACoB,EAAD,WCNFuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c24b4329.chunk.js","sourcesContent":["import React from 'react';\nimport { connectSearchBox } from 'react-instantsearch-dom';\nimport { Form, FormGroup, FormControl, Button } from 'react-bootstrap';\nimport './custom-search-box.css';\n\nconst SearchBox = ({ currentRefinement, isSearchStalled, refine }) => (\n    <Form noValidate action='' role='search'>\n        <FormGroup id='form-group'> \n            <FormControl type='search' value={currentRefinement} onChange={event => refine(event.currentTarget.value)} />\n            <Button id='reset-button' variant='outline-light' onClick={() => refine('')}>Reset Search</Button>\n        </FormGroup>\n    </Form>\n)\n\nexport const CustomSearchBox = connectSearchBox(SearchBox);\n","import React from 'react';\nimport { connectHits } from 'react-instantsearch-dom';\nimport { Card } from 'react-bootstrap';\n\nconst Hits = ({ hits }) => (\n    <ol>\n        {hits.map(hit => (\n            <Card key={hit.objectID}>\n                <Card.Body>\n                    <Card.Title>{`${hit.title} -- ${hit.year}`}</Card.Title>\n                    <Card.Text>{`${hit.cast[0]} ${hit.cast[1] ? `and ${hit.cast[1]}` : ''}`}</Card.Text>\n                </Card.Body>\n            </Card>\n        ))}\n    </ol>\n)\n\nexport const CustomHits = connectHits(Hits);\n","import React from 'react';\nimport algoliasearch from 'algoliasearch/lite';\nimport { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom';\nimport { CustomSearchBox } from './components/custom-search-box/CustomSearchBox';\nimport { CustomHits } from './components/custom-hits/CustomHits';\nimport './App.css';\nimport {Container, Col, Row} from 'react-bootstrap';\n\nconst searchClient = algoliasearch('TBO3XAKUGH','5c3466744b79c891637e1d1009c7e850');\n\nfunction App() {\n    return (\n      <Container className='mt-5'>\n          <h1>Classic Movie Search</h1>\n          <Row>\n              <Col>\n                  <InstantSearch searchClient={searchClient} indexName=\"dev_MOVIES\">\n                      <CustomSearchBox />\n                      <CustomHits />\n                  </InstantSearch>\n              </Col>\n          </Row>\n      </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}